-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

SELECT V.venue_name, AVG(E.ticket_price) AS avg_ticket_price
FROM Venu V
JOIN Event E ON V.venue_id = E.venue_id
GROUP BY V.venue_name;


-- Find Events with More Than 50% of Tickets Sold using subquery

SELECT event_id, event_name
FROM Event
WHERE (num_tickets / total_seats) > 0.5;


-- Calculate the Total Number of Tickets Sold for Each Event

SELECT event_id, event_name, SUM(num_tickets) AS total_tickets_sold
FROM Booking B
JOIN Event E ON B.event_id = E.event_id
GROUP BY event_id, event_name;

-- Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery

SELECT customer_id, customer_name
FROM Customer C
WHERE NOT EXISTS (
    SELECT 1
    FROM Booking B
    WHERE B.customer_id = C.customer_id
);

-- List Events with No Ticket Sales Using a NOT IN Subquery

SELECT event_id, event_name
FROM Event
WHERE event_id NOT IN (
    SELECT DISTINCT event_id
    FROM Booking
);

-- Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause

SELECT event_type, COALESCE(total_tickets_sold, 0) AS total_tickets_sold
FROM (
    SELECT E.event_type, SUM(B.num_tickets) AS total_tickets_sold
    FROM Event E
    LEFT JOIN Booking B ON E.event_id = B.event_id
    GROUP BY E.event_type
) AS ticket_count
ORDER BY event_type;


-- Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause

SELECT event_id, event_name, ticket_price
FROM Event
WHERE ticket_price > (
    SELECT AVG(ticket_price)
    FROM Event
);


-- Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery

SELECT C.customer_id, C.customer_name, COALESCE(SUM(B.total_cost), 0) AS total_revenue
FROM Customer C
LEFT JOIN Booking B ON C.customer_id = B.customer_id
GROUP BY C.customer_id, C.customer_name
ORDER BY C.customer_id;


-- List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause

SELECT DISTINCT C.customer_id, C.customer_name
FROM Customer C
JOIN Booking B ON C.customer_id = B.customer_id
WHERE B.event_id IN (
    SELECT event_id
    FROM Event
    WHERE venue_id = (SELECT venue_id FROM Venu WHERE venue_name = 'Your Venue Name')
);


-- Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY

SELECT event_type, SUM(num_tickets) AS total_tickets_sold
FROM Event E
JOIN Booking B ON E.event_id = B.event_id
GROUP BY event_type;


-- Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT

SELECT DISTINCT C.customer_id, C.customer_name, DATE_FORMAT(B.booking_date, '%Y-%m') AS booking_month
FROM Customer C
JOIN Booking B ON C.customer_id = B.customer_id;


-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

SELECT V.venue_name, AVG(E.ticket_price) AS avg_ticket_price
FROM Venu V
JOIN Event E ON V.venue_id = E.venue_id
GROUP BY V.venue_name;
