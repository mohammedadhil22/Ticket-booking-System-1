-- Write a SQL query to List Events and Their Average Ticket Prices

SELECT event_name, AVG(ticket_price) AS avg_ticket_price
FROM Event
GROUP BY event_name;


-- Write a SQL query to Calculate the Total Revenue Generated by Events

SELECT SUM(total_cost) AS total_revenue
FROM Booking;


-- Write a SQL query to find the event with the highest ticket sales

SELECT event_id, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY event_id
ORDER BY total_tickets_sold DESC
LIMIT 1;


-- Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event

SELECT event_id, event_name, SUM(num_tickets) AS total_tickets_sold
FROM Booking
GROUP BY event_id, event_name;

-- Write a SQL query to Find Events with No Ticket Sales

SELECT event_id, event_name
FROM Event
WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Booking);


-- Write a SQL query to Find the User Who Has Booked the Most Tickets
SELECT customer_id, customer_name, SUM(num_tickets) AS total_tickets_booked
FROM Booking b
JOIN Customer c ON b.customer_id = c.customer_id
GROUP BY customer_id, customer_name
ORDER BY total_tickets_booked DESC
LIMIT 1;


-- Write a SQL query to List Events and the total number of tickets sold for each month

SELECT 
    DATE_FORMAT(event_date, '%Y-%m') AS month_year,
    event_name,
    SUM(num_tickets) AS total_tickets_sold
FROM Event
JOIN Booking ON Event.event_id = Booking.event_id
GROUP BY month_year, event_name
ORDER BY month_year, event_name;


-- Write a SQL query to calculate the average Ticket Price for Events in Each Venue

SELECT 
    v.venue_id,
    v.venue_name,
    AVG(e.ticket_price) AS average_ticket_price
FROM Venue v
JOIN Event e ON v.venue_id = e.venue_id
GROUP BY v.venue_id, v.venue_name;


-- Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type

SELECT 
    event_type,
    SUM(num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY event_type;


-- Write a SQL query to calculate the total Revenue Generated by Events in Each Year

SELECT 
    YEAR(event_date) AS event_year,
    SUM(num_tickets * ticket_price) AS total_revenue
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY event_year;


-- Write a SQL query to list users who have booked tickets for multiple events

SELECT 
    c.customer_id,
    c.customer_name,
    COUNT(b.booking_id) AS num_bookings
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_id, c.customer_name
HAVING COUNT(b.booking_id) > 1;


-- Write a SQL query to calculate the Total Revenue Generated by Events for Each User

SELECT 
    c.customer_id,
    c.customer_name,
    SUM(b.total_cost) AS total_revenue_generated
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_id, c.customer_name;


-- Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue

SELECT 
    v.venue_id,
    v.venue_name,
    e.event_type,
    AVG(e.ticket_price) AS average_ticket_price
FROM Venue v
JOIN Event e ON v.venue_id = e.venue_id
GROUP BY v.venue_id, v.venue_name, e.event_type;


-- Write a SQL query to list Users and the Total Number of Tickets They've Purchased in the Last 30 Days

SELECT 
    c.customer_id,
    c.customer_name,
    SUM(b.num_tickets) AS total_tickets_purchased
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
WHERE b.booking_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY c.customer_id, c.customer_name;

